__section__
default
__description__
__title__

__page__
ajax
__lang__
en_US
__name__
new_slashboxes
__template__

<!-- ######################################################################################### -->

<form id="modal_prefs" name="myform" method="post" action="" onsubmit="savePreviewBlock(); false">

<div class="block_name"><input type="hidden" name="block_name" value="" class="block_name" id="blockname"></div>
<input type="hidden" name="formname" value="slashboxes">
<input type="hidden" name="uid" value="[% user.uid %]">
<input type="hidden" name="refreshable" value="">
[% PROCESS reskey_tag %]

<div id="dialog" title="Add New Slashbox">

	<div class="yui-g slashboxselector"> 
		<div id="slashbox-first" class="yui-u first">
        			<div id="slashbox-tabs">
			                <ul>
						<li><span class="slashboxes-public"><a href="#fragment-1"><span>Public</span></a></span></li>
						<li><span class="slashboxes-public"><a href="#fragment-2"><span>[% user.nickname %]</span></a></span></li>
						<li><span class="slashboxes-public"><a href="#fragment-3"><span>Friends</span></a></span></li>
			                </ul>
					<input type="input" name="slashbox-filter" id="slashbox-filter" size="30" value="" />              
			                <div id="fragment-1">
						<select id="slashboxes-available-public" name="pselect" size=10 class="select">
						</select>
			                </div>  
			                <div id="fragment-2">
						<select id="slashboxes-available-user" name="uselect" size=10 class="select">
                                                </select>
			                </div>
			                <div id="fragment-3">
						<select id="slashboxes-available-friend" name="fselect" size=10 class="select">
                                                </select>
			                </div>
				</div>
				<div class="actions">
				</div>
				<div class="closedialog">
					<a href="#" onclick="cancelPreviewBlock(); return false;"><span class="closebox">x</span></a>
					<input type="button" value="Save" onclick="savePreviewBlock()">
					<input type="button" value="Cancel" onclick="cancelPreviewBlock(); return false;">
				</div>
		</div>
	</div>
</div>
</form>

<script type="text/javascript">
var create_button	= "<div class='title collapsed' id='newslashbox-title'><h4><a href='#' id='newslashbox-edit'>Add Slashbox<span class='addbox'>+</span></a></h4></div><div class='content' id='newslashbox-content'></div>";
var ploaded = false;
var uloaded = false;
var floaded = false;

var sba = {};
function getSlashboxLists(type) {
	var $avail = $('select#slashboxes-available-' + type);
	if (sba[type])
		return(sba[type]);

	var $options = $avail.find('option');
	if ($options && $options.length)
		sba[type] = $options;

	return($options);
}

function resetSlashboxLists(type) {
	var $avail = $('select#slashboxes-available-' + type);
	$avail.append(sba[type]);
	return($avail);
}

function formatSlashboxSelectorUI() {
        var	$block          = $('#newslashbox-create'),
		$slashbox	= $('#slashbox-first'),
		block_offset    = $block.offset(),
		$dialog         = get_modal_parts('#modal_box')
		$edit_field     = $dialog.find('input#slashbox-filter'),
		new_classname   = 'newslashbox-edit' + ($block.is('.active') ? ' active' : '')
		$style		= $('#slashboxes').find('div.block:not(.nosort):first');

	$dialog.anchor_width	= $block.width() / 3 * 2;
	$dialog.anchor_height	= $block.height();
	$dialog.anchor_top	= block_offset.top;
	$dialog.anchor_left	= block_offset.left;


	$dialog.addClass(new_classname).
		css({
			position:	'absolute',
			padding:	0,
			margin:		0,
			width:		$dialog.anchor_width,
			height:		$dialog.anchor_height,
			top:		$dialog.anchor_top + 'px',
			left:		$dialog.anchor_left + 'px'
		});

	$any('modal_cover').
		css({ opacity: 0 }).
		show().
		animate({ opacity: 0.75 }, 1000);

	var dialog_elem = $dialog[0];
	dialog_elem._custom_show_fn = function(){
		var     $content        = $dialog.find('#modal_box_content').css('overflow', 'hidden'),
			to_height       = 270,
			to_width        = $dialog.anchor_width,
			to_top		= $dialog.anchor_top + 'px',
			to_left		= $dialog.anchor_left - $dialog.anchor_width + 'px';

			$dialog.animate({
				top:		to_top,
				left:		to_left,
				height:		to_height,
				width:		to_width
			}, function(){
				$content.css('overflow', '');
				$edit_field.focus();
			});
	};
}

function resizePreview( preview_text ) {
	$('newslashbox-content').show();
	var $slashbox_title = preview_text || "Semi-Random Box";
	var $title = $("div#newslashbox-title");
	$title.html( "<h4>" + $slashbox_title + "<a href='#' onclick='cancelPreviewBlock(); return false'><span class='closebox'>x</span></a></h4>" );
	$title.removeClass('collapsed');
	$title.parent().addClass('expanded');
	var	$dialog         = get_modal_parts('#modal_box'),
		$edit_field     = $dialog.find('input#slashbox-filter'),
		$block          = $('#newslashbox-create'),
		block_offset    = $block.offset(),
		$wrapper	= $('#slashbox-wrapper'),
		wrapper_height	= $wrapper.height(),
		$chooser	= $('#slashbox-first'),
		chooser_height	= $chooser.height() + 40,
		new_height	= 0,
		new_top		= block_offset.top + 'px';
	if( chooser_height >= wrapper_height ) {
		new_height = chooser_height;
	} else {
		new_height = wrapper_height;
	}
	$dialog.animate({
		top:		new_top,
		height:		new_height
	}, function(){
		$edit_field.focus();
	});
	$('div#newslashbox-content').addClass('preview');
}

function populatePreview( preview_bid, preview_text ) {
        var     $dialog         = get_modal_parts('#modal_box'),
		params		= {};
	params['op']		= 'getModalPrefs';
	params['reskey']	= reskey_static;
	params['section']	= 'preview_slashboxes';
	params['tabbed']	= 0;
	params['preview_bid']	= preview_bid;
	ajax_update(params, 'newslashbox-content', { onComplete: function() { resizePreview( preview_text ) } });
}

function getPortalBoxes() {
        var     params		= {};
	params['op']		= 'getModalPrefs';
	params['reskey']	= reskey_static;
	params['section']	= 'portal_slashboxes';
	params['tabbed']	= 0;
	ajax_update(params, 'slashboxes-available-public', { onComplete: filterPortalBoxes });
}

function getUserBoxes() {
        var     params		= {};
	params['op']		= 'getModalPrefs';
	params['reskey']	= reskey_static;
	params['section']	= 'user_slashboxes';
	params['tabbed']	= 0;
	ajax_update(params, 'slashboxes-available-user', { onComplete: filterUserBoxes });
}

function getFriendBoxes() {
        var     params		= {};
	params['op']		= 'getModalPrefs';
	params['reskey']	= reskey_static;
	params['section']	= 'friend_slashboxes';
	params['tabbed']	= 0;
	ajax_update(params, 'slashboxes-available-friend', { onComplete: filterFriendBoxes });
}

function markAdded( $avail ) {
	$('#slashboxes').find('div.block:not(.nosort)').each( function() {
		var block = $( this ).find('.title').attr('id');
		if (block) {
			block = block.replace(/-title/i,'');
			$avail.find('option').each( function() {
				if ( block == $(this).val() ) {
					$(this).addClass( "added" );
					$(this).remove();
				}
			});
		}
	});
}

function filterPortalBoxes() {
	ploaded = true;
	var $avail = $('select#slashboxes-available-public');
	markAdded( $avail );
	randPreviewBlock( $avail );
}

function filterUserBoxes() {
	uloaded = true;
	var $avail = $('select#slashboxes-available-user');
	markAdded( $avail );
	randPreviewBlock( $avail );
}

function filterFriendBoxes() {
	floaded = true;
	var $avail = $('select#slashboxes-available-friend');
	markAdded( $avail );
	randPreviewBlock( $avail );
}

function randPreviewBlock( $select ) {
	var	count		= $select.find('option').length,
		randbox		= Math.floor( Math.random() * count ),
		$randopt	= $select.find('option:nth-child('+randbox+')'),
		randbid		= $randopt.val(),
		randtitle	= $randopt.text();
	populatePreview( randbid, randtitle );
	$randopt.attr('selected',true);
}

function savePreviewBlock() {
	var	currtab = $('#slashbox-tabs').tabs('option','selected'),
		is_selected = false,
		new_prefix,
		$avail;
	switch( currtab )
	{
		case 0:
			$avail = $('select#slashboxes-available-public');
			new_prefix = 'showbox';
			break;
		case 1:
			$avail = $('select#slashboxes-available-user');
			new_prefix = 'dynamic';
			break;
		case 2:
			$avail = $('select#slashboxes-available-friend');
			new_prefix = 'dynamic';
			break;
		default:
			new_prefix = 'showbox';
			break;
	}

	var $option = $avail.find('option[selected]');
	var bidval = '';
	if( $option.length == 1 ) {
		is_selected = true;
		bidval = $option.val();
		$option.addClass('added');
		$option.remove();
	}

	if( $avail.attr('length') == 1 || is_selected == true ) {
		bidval = bidval || $avail.val();
		var	blocks = "";
		$('#slashboxes').find('div.block:not(.nosort)').each(function(){
			var blockdiv = $( this ).find('.title').attr('id');
			if (blockdiv) {
				blockdiv = blockdiv.replace(/-title/i,'');
				if( blockdiv != "newslashbox" && blockdiv != "userbio_self" ) {
					var old_prefix = 'showbox';
					getSlashboxLists('user').each( function(){
						if( $(this).val() == blockdiv ) {
							old_prefix = 'dynamic';
						}
					});
					getSlashboxLists('friend').each( function(){
						if( $(this).val() == blockdiv ) {
							old_prefix = 'dynamic';
						}
					});
					blocks = blocks + "&" + old_prefix + "_" + blockdiv + "=on";
				}
			}
		});
		var params = {};
		params['op']		= 'saveModalPrefs';
		params['reskey']	= $dom('modal_prefs').elements.reskey.value;
		params['data']		= 'formname=slashboxes&uid=[% user.uid %]&refreshable=&useslashboxes=on' + blocks + '&' + new_prefix + '_' + bidval + '=on';
		params['blocks']	= blocks;
//		saveModalPrefs( params['op'], params['data'], params['reskey'] );
		ajax_update(params, '', { onComplete: json_handler });
		var $block = $('#newslashbox-create');
		$block.find('div.title').attr('id', bidval + '-title');
		$block.find('div.content').attr('id', bidval + '-content');
		$block.attr("id", bidval);
		var new_content = "<div class='block' id='newslashbox-create'>" + create_button + "</div>";
		$('#slashboxes').find('div.block:not(.nosort):last').after( new_content );
        	$('#newslashbox-title a').one('click', function(){ getModalPrefs('new_slashboxes','Slashboxes', 0 ); return false; });
		$('newslashbox-content').hide();
		$("input#slashbox-filter").val( "" );
		randPreviewBlock( $avail );
	}
}

function cancelPreviewBlock() {
	$('#newslashbox-create').html( create_button );
        $('#newslashbox-title a').one('click', function(){ getModalPrefs('new_slashboxes','Slashboxes', 0 ); return false; });
	$('div#newslashbox-content').removeClass('preview');
	$('div#newslashbox-create').removeClass('expanded');
	$('newslashbox-content').hide();
	hide_modal_box();
}

function updatePreview( $avail ) {
	var	preview_bid	= "",
		preview_title	= "";
	if( $avail.val() ) {
		preview_bid = $avail.val();
		$avail.find('option').each( function() {
			if( $(this).val() == $avail.val() ) {
				preview_title = $.trim( $(this).text() );
			}
		});
		populatePreview( preview_bid, preview_title );
	}
}

(function() {
	var $sba_public, $sba_user, $sba_friend;

	$('form#modal_prefs').submit(function(){return false;})

	$(document).one('hide.modal', function(){
		cancelPreviewBlock();
	});

	$(document).keydown(function(event){
		if (event.keyCode == 27) {
			cancelPreviewBlock();
		}
	});

	$('#slashbox-tabs').tabs();

	getPortalBoxes();

	$('#slashbox-tabs').bind('tabsselect', function(event, ui) {
		var fval = $("input#slashbox-filter").val();
		if( ui.index == 0 ) {
			if( !ploaded ) {
				getPortalBoxes();
			} else {
				randPreviewBlock( $('select#slashboxes-available-public') );
			}
		}
		if( ui.index == 1 ) {
			if( !uloaded ) {
				getUserBoxes();
			} else {
				randPreviewBlock( $('select#slashboxes-available-user') );
			}
		}
		if( ui.index == 2 ) {
			if( !floaded ) {
				getFriendBoxes();
			} else {
				randPreviewBlock( $('select#slashboxes-available-friend') );
			}
		}
	});

	$("#slashboxes-available-public").change(function() {
		var	$avail = $("#slashboxes-available-public");
		updatePreview( $avail );
	});
	$("#slashboxes-available-user").change(function() {
		var	$avail = $("#slashboxes-available-user");
		updatePreview( $avail );
	});
	$("#slashboxes-available-friend").change(function() {
		var	$avail = $("#slashboxes-available-friend");
		updatePreview( $avail );
	});

	formatSlashboxSelectorUI();

	var old_filter = '.';
	$("input#slashbox-filter").keyup(function () {
		var	new_filter=$("input#slashbox-filter").val()||'.',
			currtab = $('#slashbox-tabs').tabs('option', 'selected'),
			regexp,
			$avail,
			$options,
			type;

		if (new_filter === old_filter)
			return false;

		if ( currtab == 0 )
			type = 'public';
		if ( currtab == 1 )
			type = 'user';
		if ( currtab == 2 )
			type = 'friend';

		$options = getSlashboxLists(type);
		$avail = resetSlashboxLists(type);

		regexp = new RegExp(new_filter, 'i');
		$options.each(function(){
			var $opt=$(this);
			if (!regexp.test($opt.text()) || $opt.hasClass('added')) {
				$opt.remove();
			}
		});
		old_filter = new_filter;

		var $choose = $avail.find('option');
		if ( $choose.length == 1 ) {
			$choose.attr('selected',true);
			populatePreview( $choose.val(), $choose.text() );
		}
	});

})();
</script>

<!-- ######################################################################################### -->

__seclev__
500
__version__
$Id$
