__section__
default
__description__
You should describe stuff here.
__title__
Useless title to template
__page__
misc
__lang__
en_US
__name__
fhviewprefs
__seclev__
10000
__template__
[% rss_link = "";
   IF !user.is_anon && id;
	rss_link = Slash.root2abs() _ "/firehose.pl?op=rss&amp;content_type=rss" _ rss_param_str _ "&amp;logtoken=" _ Slash.strip_paramattr(Slash.getPublicLogToken());
	rss_link = rss_link _ "&amp;section=" _ id;
   END;

   section_id = id;
   is_primary_section = fh_section && fh_section.uid == 0 && fh_section.skid == constants.mainpage_skid;
   is_unsaved_section = !id || (id == 'unsaved');
%]
<form id ="modal_prefs" method="post">
<input type="hidden" name="formname" value="firehoseview">
<div class="close"><a title="Close" href="#" class="close" onclick="return false" >Close</a></div>
[% IF rss_link %]
<div class="rss"><a href="[% rss_link %]" title="RSS for [% name | strip_attribute %]">RSS</a></div>
[% END %]
[% IF is_primary_section %]
<div class="section_name">[% name | strip_literal %]</div>
<div class="contents">
[% ELSE %]
<div class="section_name"><input type="text" name="section_name" value="[% name | strip_attribute %]" class="section_name" id="fhsectionname"></div>
<div class="contents">
	<label class="c"><strong>Color:</strong>[% PROCESS fhcolor_picker id='section-prefs-color-picker' %]</label><label class="f"><strong>Filter:</strong><input type="text" name="section_filter" class="section_filter" value="[% filter | strip_attribute %]"></label><label class="i"><strong>Initial View:</strong>[% Slash.createSelect('viewid', views, { return => 1, default => default_view }) %]</label>
	<input type="hidden" name="section_color" value="">
[% END %]

	[% IF section_id %]<input type="hidden" name="id" value="[% section_id %]">[% END %]
</div>

<div class="actions">
<input type="button" value="save">
<!--<input type="button" value="cancel">-->
[% IF section_id && !is_primary_section %]<input type="button" value="[% IF fh_section && fh_section.uid == 0 %][% IF display=="no" %]un[% END %]hide[% ELSE %]delete[% END %]">[% END %]
<label><input type="checkbox" name="section_default" class="section_default" value="">default</label>
</div>

</form>
<script type="text/javascript">
// dialog not yet shown; move to tie it to the menu item
(function(){
	var	$menu			= $any('firehose-sections'),
		$item		= firehose_section_menu_item('[% IF section_id; section_id; ELSE %]unsaved[% END %]'),
		item_offset	= $item.offset(),
		$dialog			= get_modal_parts('#modal_box'),
		$edit_field		= $dialog.find('input#fhsectionname'),
		$save_button	= $dialog.find('input[type=button][value=save]');


	// custom css
	$dialog.addClass('links-sections-edit active').
		css({	// make the dialog look as though it _is_ the menu item
			position:	'absolute',
			margin:		0,
			top:		item_offset.top + 'px',
			left:		item_offset.left + 'px'
		});

	[% IF section_id %]
	if ( $menu.metadata().default_id == '[% section_id %]' ) {
		$dialog.find('input[name=section_default]').
			attr({ checked: 'checked', disabled: 'disabled' });
	}

	$dialog.find('[value$=hide],[value=delete]').
		click(function(){
			var action = $(this).val();
			if ( action == 'delete' ) {
				$item.remove();
				$item = $([]);
			}
			$item.toggleClass('hide', action=='hide');
			firehose_delete_section([% section_id %], {unhide:'undo'}[action]);
		});
	function save_as_default(){
		ajax_update({
			op: 'firehose_set_default_section',
			reskey: reskey_static,
			default_section: [% section_id %]
		});
		$menu.metadata().default_id = [% section_id %];
	}
	[% END %]

	function update_metadata( updated, which ){
		update_section(which, {
			name:		updated.name,
			color:		updated.color,
			filter:		updated.filter,
			viewname:	updated.viewname
		}, updated.as_default);
	}

	// custom show/hide
	var dialog_elem = $dialog[0];
	dialog_elem._custom_show_fn = function(){
		var	to_height	= $dialog.height(),
			to_width	= $dialog.width();

		$item.animate({ height: $dialog.outerHeight()-6+'px' });
		$dialog.height($item.height()).
			width($item.width() - ($dialog.outerWidth()-to_width)).
			css({ overflow: 'hidden' }).
			animate({
				height:	to_height,
				width:	to_width
			}, function(){
				$dialog.css({ overflow:'visible' }).
					find('#modal_box_content').css({ height:to_height });
				$edit_field.focus().keyup();
			});

		$any('modal_cover').
			css('opacity', 0.75).
			show();
	};

	dialog_elem._custom_hide_fn = function(){
		// allow the menu item to shrink back down to normal height
		$item.removeAttr('style');
		$dialog.find('#modal_box_content').css({ height:'' });
	};

	$dialog.keyup(function( e ){
		if ( e.which == $.ui.keyCode.ENTER ) {
			$save_button.click();
			return false;
		}
	});

	$dialog.find('input[type=button], a.close').click(hide_modal_box);

[% IF is_primary_section %]
	$save_button.
		click(function(){
			// save "is default"
			$dialog.find('input[name=section_default]:enabled:checked').each(save_as_default);
			return false;
		});
[% ELSE %]
	var	$picker		= $any('section-prefs-color-picker-trigger').
					bind('change', function( event, color ){
						$('input[name=section_color]').val(color);
					}),
		picker_color	= $picker.data('color_fn');

	picker_color('color-saved', $item.metadata().color || firehose_settings.color);

	function dialog_values(){
		return {
			name:		$edit_field.length ? $edit_field.val() : $dialog.find('div.sectionname').text(),
			color:		picker_color(),
			filter:		$dialog.find('input[name=section_filter]').val(),
			viewname:	$dialog.find('select option[selected]').text().toLowerCase(),
			as_default:	!!$dialog.find('input[name=section_default]').attr('checked')
		};
	}
	var saved = dialog_values();

	if ( !saved.name && !saved.filter ) {
		$dialog.find('input[name=section_filter]').val( $item.metadata().filter );
		$edit_field.keyup();

		var	$select	= $dialog.find('select'),
			view_id	= $select.find(':contains(' + $item.metadata().viewname.substr(1) + ')').val();
		$select.val(view_id);
	}

	function foldtext(){
		var o = arguments[ arguments.length-1 ];
		return $.trim(o.nodeType ? o.text||o.value : o).toLowerCase();
	}

var save_state_for;
(function(){
var in_use=$('#links-sections a.data-title'), mine=$item.find('a.data-title')[0];
in_use = (mine ? in_use.not(mine) : in_use).map(foldtext).get();
in_use.push('unsaved', '');
in_use = Slash.Util.qw.as_set(in_use);

save_state_for = function( name ){
	return in_use[foldtext(name)] ? 'disabled' : '';
};
})();

	// keep the save button in sync with the name field... that is: disabled for invalid names
	var	save_state = '';

	// test and enable/disable (as needed) on keyup
	$edit_field.keyup(function( e ){
		var	s=save_state_for(this);
		if ( s != save_state ) {
			save_state = s;
			$save_button.attr('disabled', save_state);
			[% IF !section_id %]
			$dialog.find('input[name=section_default]').
				attr({ checked: '', disabled: save_state });
			[% END %]
		}
	});

	function save(){
		var requested = dialog_values();

	[% IF is_unsaved_section %]

		$item.find('a:first').text(requested.name);
		ajax_update({
				op:			'firehose_new_section',
				reskey:		reskey_static,

				name:		requested.name,
				color:		requested.color,
				fhfilter:	requested.filter,
				view_id:	requested.viewname,

				as_default:	requested.as_default

			}, '', { onComplete: function( transport ){
				var json = eval_response(transport);
				if ( json && json.li ) {
					var	$saved = json.li && $(json.li).insertBefore($item);
					$item.remove();
					update_metadata(requested, $saved);
				}
			}
		});

	[% ELSE %]

		var changed={};
		$.each(saved, function( k, v ){
			changed[k] = v!==requested[k];
		});
		changed.query = changed.color||changed.filter||changed.viewname;

		changed.name && $item.find('a:first').text(requested.name);
		if ( changed.name || changed.query ) {
			update_metadata(requested, [% section_id %]);
			saveModalPrefs();
		}
		changed.query && $(document).trigger('firehose-setting-section', [% section_id %]);
		changed.as_default && save_as_default();

	[% END %]

		return false;
	}

	$save_button.click(save);
[% END %]

})();
</script>


