__section__
default
__description__
You should describe stuff here.
__title__
Useless title to template
__page__
misc
__lang__
en_US
__name__
fhviewprefs
__seclev__
10000
__template__
[% rss_link = "";
   IF !user.is_anon && id;
	rss_link = Slash.root2abs() _ "/firehose.pl?op=rss&amp;content_type=rss" _ rss_param_str _ "&amp;logtoken=" _ Slash.strip_paramattr(Slash.getPublicLogToken());
	rss_link = rss_link _ "&amp;section=" _ id;
   END;

   section_id = id;
   is_primary_section = fh_section && fh_section.uid == 0 && fh_section.skid == constants.mainpage_skid;
%]
<form id ="modal_prefs" method="post">
<input type="hidden" name="formname" value="firehoseview">
<div class="close"><a title="Close" href="#" class="close" onclick="return false" >Close</a></div>
[% IF rss_link %]
<div class="rss"><a href="[% rss_link %]" title="RSS for [% name | strip_attribute %]"><img src="[% constants.imagedir %]/feed.png"></a></div>
[% END %]
[% IF is_primary_section %]
<div class="section_name">[% name | strip_literal %]</div>
<div class="contents">
[% ELSE %]
<div class="section_name"><input type="text" name="section_name" value="[% name | strip_attribute %]" class="section_name" id="fhsectionname"></div>
<div class="contents">
	<label class="c"><strong>Color:</strong>[% PROCESS fhcolor_picker id='section-prefs-color-picker' %]</label><label class="f"><strong>Filter:</strong><input type="text" name="section_filter" class="section_filter" value="[% filter | strip_attribute %]"></label><label class="i"><strong>Initial View:</strong>[% Slash.createSelect('viewid', views, { return => 1, default => default_view }) %]</label>
	<input type="hidden" name="section_color" value="">
[% END %]

	[% IF section_id %]<input type="hidden" name="id" value="[% section_id %]">[% END %]
</div>

<div class="actions">
<input type="button" value="save">
<!--<input type="button" value="cancel">-->
[% IF section_id && !is_primary_section %]<input type="button" value="[% IF fh_section && fh_section.uid == 0 %][% IF display=="no" %]un[% END %]hide[% ELSE %]delete[% END %]">[% END %]
<label><input type="checkbox" name="section_default" class="section_default" value="">default</label>
</div>

</form>
<script type="text/javascript">
// dialog not yet shown; move to tie it to the menu item
(function(){
	var	$li		= $any('fhsection-[% IF section_id; section_id; ELSE %]unsaved[% END %]'),
		li_offset	= $li.offset(),
		$dialog		= get_modal_parts('#modal_box'),
		$edit_field	= $dialog.find('input#fhsectionname'),
		new_classname	= 'links-sections-edit' + ($li.is('.active') ? ' active' : ''),
		$save_button	= $dialog.find('input[type=button][value=save]');


	// custom css
	$dialog.addClass(new_classname).
		css({	// make the dialog look as though it _is_ the menu item
			position:	'absolute',
			margin:		0,
			top:		li_offset.top + 'px',
			left:		li_offset.left + 'px'
		});

	[% IF section_id %]
	if ( $li.parent().metadata().default_id == '[% section_id %]' ) {
		$dialog.find('input[name=section_default]').
			attr({ checked: 'checked', disabled: 'disabled' });
	}
	[% END %]

	// custom show/hide
	var dialog_elem = $dialog[0];
	dialog_elem._custom_show_fn = function(){
		var	$content	= $dialog.find('#modal_box_content').css('overflow', 'hidden'),
			to_height	= $dialog.height(),
			to_width	= $dialog.width();

		$li.animate({ height: $dialog.outerHeight()-6+'px' });
		$dialog.height($li.height()).
			width($li.width() - ($dialog.outerWidth()-to_width)).
			animate({
				height:	to_height,
				width:	to_width
			}, function(){
				$content.css('overflow', '');
				$edit_field.focus().keyup();
			});

		$any('modal_cover').
			css({ opacity: 0 }).
			show().
			animate({ opacity: 0.2 }, 3000);
	};

	dialog_elem._custom_hide_fn = function(){
		// allow the menu item to shrink back down to normal height
		$li.removeAttr('style');
		// $dialog.add(document).unbind('mousedown.fhviewprefs');
	};

	$dialog.keyup(function( e ){
		if ( e.which == $.ui.keyCode.ENTER ) {
			$save_button.click();
			return false;
		}
	});

	$dialog.find('input[type=button], a.close').click(hide_modal_box);

[% IF is_primary_section %]
	$save_button.
		click(function(){
			// save "is default"
			return false;
		});
[% ELSE %]
	var	$picker		= $any('section-prefs-color-picker').bind('change', function( event, color ){ $('input[name=section_color]').val(color); }),
		color_fn	= $picker.data('color_fn');
	color_fn($li.metadata().color || firehose_settings.color, true);

	function dialog_values(){
		return {
			name:		$edit_field.val(),
			color:		color_fn(),
			filter:		$dialog.find('input[name=section_filter]').val(),
			view:		$dialog.find('select').val(),
			as_default:	!!$dialog.find('input[name=section_default]').attr('checked')
		};
	}
	var saved = dialog_values();

	if ( !saved.name && !saved.filter ) {
		$dialog.find('input[name=section_filter]').val( $li.metadata().filter );
		$edit_field.keyup();

		var	$select	= $dialog.find('select'),
			view_id	= $select.find(':contains(' + $li.metadata().viewname.substr(1) + ')').val();
		$select.val(view_id);
	}

	// keep the save button in sync with the name field... that is: disabled for invalid names
	var	save_disabled	= '',
		invalid_name	= Slash.Util.qw.as_set(
					// can't save a new section with an existing section's name
					$li.siblings().find('a[id^=fhsectiontitle-]').
						map(function(){
							return $.trim($(this).text()).toLowerCase();
						}).get()
				);
	invalid_name[''] = true;	// ...nor without a name at all

	// test and enable/disable (as needed) on keyup
	$edit_field.keyup(function( e ){
		var	name	= $(this).val(),
			folded	= $.trim(name).toLowerCase(),
			invalid	= sign(invalid_name[folded]),
			disable	= ['', 'disabled'][invalid];

		if ( disable != save_disabled ) {
			save_disabled = disable;
			$save_button.attr('disabled', disable);
			[% IF !section_id %]
			$dialog.find('input[name=section_default]').
				attr({ checked: '', disabled: disable });
			[% END %]
		}
	});

	// button behavior
	[% IF section_id %]
	$dialog.find('[value$=hide],[value=delete]').
		click(function(){
			var action = $(this).val();
			if ( action == 'delete' ) {
				$li.remove();
				$li = $([]);
			}
			$li.toggleClass('hide', action=='hide');
			firehose_delete_section([% section_id %], {unhide:'undo'}[action]);
		});
	function save_as_default(){
		ajax_update({
			op: 'firehose_set_default_section',
			reskey: reskey_static,
			default_section: [% section_id %]
		});
		$li.parent().metadata().default_id = [% section_id %];
	}
	function update_metadata( updated ){
		var item_md = $li.metadata();
		item_md.name = updated.name;
		item_md.color = updated.color;
		item_md.filter = updated.filter;
		item_md.view = updated.view;

		updated.as_default && ($li.parent().metadata().default_id = [% section_id %]);
	}
	[% END %]

	$save_button.
		click(function(){
			var	requested	= dialog_values(),
				name_changed	= saved.name != requested.name,
				color_changed	= saved.color != requested.color,
				query_changed	= color_changed || saved.filter != requested.filter || saved.view != requested.view,
				default_changed	= saved.as_default != requested.as_default;

			if ( $li.is('#fhsection-unsaved') ) {
				save_the_unsaved_section(requested, function( id ){
					query_changed && firehose_set_options('section', id);
				});
			} else {
				name_changed && $li.find('a:first').text($edit_field.val());
				(name_changed||query_changed||color_changed) && saveModalPrefs();[% IF section_id %]
				default_changed && save_as_default();
				update_metadata(requested);
				query_changed && firehose_set_options('section', [% section_id %]);[% END %]
			}
			return false;
		});
[% END %]

})();
</script>


