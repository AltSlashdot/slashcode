__section__
default
__description__
You should describe stuff here.
__title__
Useless title to template
__page__
misc
__lang__
en_US
__name__
fhviewprefs
__seclev__
10000
__template__
[% rss_link = "";
   IF !user.is_anon && id;
	rss_link = Slash.root2abs() _ "/firehose.pl?op=rss&amp;content_type=rss" _ rss_param_str _ "&amp;logtoken=" _ Slash.strip_paramattr(Slash.getPublicLogToken());
	rss_link = rss_link _ "&amp;section=" _ id;
   END;
%]
<form id ="modal_prefs" method="post">
<input type="hidden" name="formname" value="firehoseview">
<div class="close"><a title="Close" href="#" class="close" onclick="return false" >Close</a></div>
[% IF rss_link %]
<div class="rss"><a href="[% rss_link %]" title="RSS for [% name | strip_attribute %]"><img src="[% constants.imagedir %]/feed.png"></a></div>
[% END %]
[% IF (fh_section.skid != constants.mainpage_skid) %]
<div class="section_name"><input type="text" name="section_name" value="[% name | strip_attribute %]" class="section_name" id="fhsectionname"></div>
[% ELSE %]
<div class="section_name">[% name | strip_literal %]</div>
[% END %]
<div class="section_filter">Filter: <input type="text" name="section_filter" class="section_filter" value="[% filter | strip_attribute %]"></div>
<div class="section_initialview">Initial View: [% Slash.createSelect('viewid', views, { return => 1, default => default_view }) %]</div>

[% IF id %]<input type="hidden" name="id" value="[% id %]">[% END %]

<input type="button" value="save">
<!--<input type="button" value="cancel">-->
[% hide_available = 1 %]
[% IF fh_section && fh_section.uid == 0 && fh_section.skid == constants.mainpage_skid;
	hide_available = 0;
END %]
[% IF id && hide_available %]<input type="button" value="[% IF fh_section && fh_section.uid == 0 %][% IF display=="no" %]un[% END %]hide[% ELSE %]delete[% END %]">[% END %]

</form>
<script type="text/javascript">
// dialog not yet shown; move to tie it to the menu item
(function(){
	var	$li		= $('#fhsection-[% id %], #fhsection-unsaved').eq(0),
		li_offset	= $li.offset(),
		$dialog		= get_modal_parts('#modal_box')
		$edit_field	= $dialog.find('input#fhsectionname'),
		new_classname	= 'links-sections-edit' + ($li.is('.active') ? ' active' : '');


	// custom css
	$dialog.addClass(new_classname).
		css({	// make the dialog look as though it _is_ the menu item
			position:	'absolute',
			margin:		0,
			top:		li_offset.top + 'px',
			left:		li_offset.left + 'px'
		});

	// custom show/hide
	var dialog_elem = $dialog[0];
	dialog_elem._custom_show_fn = function(){
		var	$content	= $dialog.find('#modal_box_content').css('overflow', 'hidden'),
			to_height	= $dialog.height(),
			to_width	= $dialog.width();

		$li.animate({ height: $dialog.outerHeight()-6+'px' });
		$dialog.height($li.height()).
			width($li.width() - ($dialog.outerWidth()-to_width)).
			animate({
				height:		to_height,
				width:		to_width
			}, function(){
				$content.css('overflow', '');
				$edit_field.focus();
			});

		var v = dialog_values();
		if ( !v.name && !v.filter ) {
			$dialog.find('input[name=section_filter]').val( $li.data('section_filter') );
			$edit_field.keyup();
		}

		// a mouse click outside the dialog must hide it
		$(document).bind('mousedown.fhviewprefs', function( event ){
			var p = event.originalEvent.target;
			while ( p ) {
				if ( p === dialog_elem ) {
					return true;
				}
				p = p.parentNode;
			}
			hide_modal_box();
		});
	};

	dialog_elem._custom_hide_fn = function(){
		// allow the menu item to shrink back down to normal height
		$li.removeAttr('style');
		$(document).unbind('mousedown.fhviewprefs');
	};



	function dialog_values(){
		return {
			name:	$edit_field.val(),
			filter:	$dialog.find('input[name=section_filter]').val(),
			view:	$dialog.find('select').val()
		};
	}


	var saved = dialog_values();

	// button behavior
	var $save_button = $dialog.
		find('input[type=button], a.close').
			click(hide_modal_box).
			[% IF id %]
			filter('[value$=hide], [value=delete]').
				click(function(){
					var action = $(this).val();
					if ( action == 'delete' ) {
						$li.remove();
						$li = $([]);
					}
					$li.toggleClassTo('hide', action=='hide');
					firehose_delete_section([% id %], {unhide:'undo'}[action]);
				}).
			end().
			[% END %]
			filter('[value=save]').
				click(function(){
					var	requested	= dialog_values(),
						name_changed	= saved.name != requested.name,
						query_changed	= (saved.filter != requested.filter) || (saved.view != requested.view);
					if ( name_changed ) {
						$li.find('a:first').text($edit_field.val());
					}
					if ( name_changed || query_changed ) {
						saveModalPrefs();
					}
					[% IF id %]
					if ( query_changed ) {
						firehose_set_options('section', [% id %]);
					}
					if ( $li.is('#fhsection-unsaved') ) {
						$li.attr('id', 'fhsection-'+[% id %]);
					}
					[% ELSE %]
					if ( $li.is('#fhsection-unsaved') ) {
						$li.removeAttr('id');
					}
					[% END %]
				});

	// keep the save button in sync with the name field... that is: disabled for invalid names
	var	prev_disabled	= false,
		invalid_name	= Slash.Util.qw.as_set(
					// can't save a new section with an existing section's name
					$li.siblings().find('a[id^=fhsectiontitle-]').
						map(function(){
							return $.trim($(this).text()).toLowerCase();
						}).get()
				);
	invalid_name[''] = true;	// ...nor without a name at all

	// test and enable/disable (as needed) on keyup
	$edit_field.keyup(function( e ){
		var next_disabled = invalid_name[$.trim($(this).val()).toLowerCase()];
		if ( next_disabled != prev_disabled ) {
			$save_button.attr('disabled', (next_disabled ? 'disabled' : ''));
			prev_disabled = next_disabled;
		}
		if ( e.which == $.keyCode.ENTER ) {
			$save_button.click();
			return false;
		}
	});
})();
</script>


