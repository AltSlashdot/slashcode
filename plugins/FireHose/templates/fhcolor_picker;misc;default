
__section__
default
__description__
A vertical menu with animation for selecting the color threshold in the Firehose.
__title__
Useless title to template
__page__
misc
__lang__
en_US
__name__
fhcolor_picker
__seclev__
10000
__template__
<span id="[% id %]-trigger" class="color-picker trigger" style="display: none;"><span></span></span>
<ul id="[% id %]-menu" class="color-picker menu" style="display: none; z-index: 1000001">
	<li class="red"><span>red (best)</span></li>
	<li class="orange"><span>orange</span></li>
	<li class="yellow"><span>yellow</span></li>
	<li class="green"><span>green</span></li>
	<li class="blue"><span>blue</span></li>
	<li class="indigo"><span>indigo</span></li>
	<li class="violet"><span>violet</span></li>
	<li class="black"><span>black (all)</span></li>
</ul>
<script type="text/javascript">
$(function(){
var	$swatch	= $any('[% id %]-trigger'),
	$menu	= $any('[% id %]-menu');

function swatch_color( key, new_color ){
	if ( key!=='color-shown' && key!=='color-saved' ) {
		// e.g., swatch_color('red') --- saves 'red', but doesn't trigger an event
		arguments.length==1 && (new_color=key);
		key = 'color-saved';
	}

	// Getter...
	if ( !new_color ) {
		// e.g., swatch_color(), swatch_color('color-shown')
		return $swatch.data(key);
	}

	// Setter... (note: 'color-saved' saves; both show)

	if ( new_color==='color-shown' || new_color==='color-saved' ) {
		// e.g., swatch_color('color-shown', 'color-saved') --- re-displays the saved color
		new_color = $swatch.data(new_color)
	}

	// show new_color iff not already
	var displayed_color=$swatch.data('color-shown');
	if ( new_color !== displayed_color ) {
		$swatch.removeClass(displayed_color||'red orange yellow green blue indigo violet black').
			data('color-shown', new_color).
			addClass(new_color).
			show().
			find('span').
				text($menu.find('li.'+new_color).text());
	}

	// save and optionally trigger event
	if ( key==='color-saved' && new_color!==$swatch.data(key) ) {
		$swatch.data(key, new_color);
		arguments.length==2 && $swatch.trigger('change', new_color);
	}
	return new_color;
}
$swatch.data('color_fn', swatch_color);

$menu.menu({
	triggers:	'#[% id %]-trigger',
	cssNamespace:	'slash',

	start: function(){
		var align=$swatch.offset();
		$menu.
			appendTo(document.body).
			css({
				position: 'absolute',
				top: align.top + $swatch.height(),
				left: align.left
			}).
			show();
	},
	over: function( e, ui ){
		swatch_color('color-shown', $any(ui.over).data('color'));
	},
	select: function( e, ui ){
		swatch_color('color-saved', 'color-shown');
	},
	out: function( e, ui ){
		ui.over || swatch_color('color-shown', 'color-saved');
	},
	stop: function(){
		$menu.hide();
	}
}).children().each(function(){
	$(this).data('color', this.className);
});

});
</script>
