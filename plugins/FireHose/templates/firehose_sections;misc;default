__section__
default
__description__
Template for generating the skinindexd template.  Uses an alternate
form of tags (<++> instead of [%%]) so it can write the standard tag
form into skinindexd.  Input:

* skins = arrayref of hashref of skin data (containing month,
	monthname, date, count, skin, rootdir)
* skin = name of parent skin

__title__

__page__
misc
__lang__
en_US
__name__
firehose_sections
__template__
[% cur_section_id = 0 %]
[% skip_edit = 0 %]
[% UNLESS (user.currentPage == "firehose" || user.currentPage == "index2" || user.currentPage == "console" || user.currentPage == "index");
	skip_edit = 1;
END;

IF  form.op == "view" || form.taskgen || user.simpledesign || user.state.simpledesign || user.firehose_nographics;
	skip_edit = 1;
END;
%]

[% IF cur_section && cur_section.fsid; cur_section_id = cur_section.fsid; END %]
[% default_section_id = constants.mainpage_skid %]
[% IF !user.is_anon && user.firehose_default_section; default_section_id = user.firehose_default_section; END %]
<ul id="firehose-sections">
	<script type="data">{ active_id:[% cur_section_id %], default_id:[% default_section_id %] }</script>
	[% FOREACH fh_section= sections %] 
		[%- NEXT IF skip_section_id && fh_section.fsid == skip_section_id -%]
		[%- hide = 0 -%]
		[%- IF fh_section.user_display; fh_section.display = fh_section.user_display; END -%]
		[%- IF fh_section.user_section_name; fh_section.section_name = fh_section.user_section_name; END -%]
		[%- IF fh_section.user_section_color; fh_section.user_section_color = fh_section.user_section_color; END -%]
		[%- is_active = 0 -%]
		[%- IF fh_section.fsid == cur_section_id; is_active = 1; END -%]
		[%- is_default = 0 -%]
		[%- IF cur_section_id == default_section_id; is_default = 1; END -%]
		[%- IF (fh_section.display == "no" && is_active == 0); hide=1; END -%]
		[%- link_loc = gskin.rootdir _ "/index2.pl?section=" _ fh_section.fsid -%]
		[% IF fh_section.skid %]
			[% the_skin = Slash.db.getSkin(fh_section.skid) %]
			[% IF the_skin && the_skin.rootdir;
				link_loc = the_skin.rootdir;
			   END %]
		[% END %]
		<li class="[% IF is_active %]active[% ELSIF hide %]hide[% END %][% IF is_default %] default[% END %]" id="fhsection-[% fh_section.fsid %]">
			<a id="fhsectiontitle-[% fh_section.fsid %]" class="data-title" href="[% link_loc %]"[% IF !user.is_anon && !skip_edit %] onclick="return false;"[% END %]>[% fh_section.section_name %]</a>
			[% IF !skip_edit %] <a href="[% PROCESS nojslink %]" onclick="[% IF user.is_anon %]show_login_box(); [% END %]return false;" class="links-sections-edit">[e]</a>[% END %]
		<script type="data">[% fh.js_anon_dump(fh_section.data); %]</script>
		</li>
	[% END %]
</ul>
[% IF (user.currentPage == "index2" || user.currentPage == "firehose" || user.currentPage == "console") && form.op != "view" && !form.taskgen %]<script type="text/javascript">

var firehose_delete_section, update_section;

(function(){
var $section_menu = $any('firehose-sections');

[% IF !user.is_anon && !skip_edit %]

firehose_delete_section = function( id, undo ) {
	ajax_update({
		op:	'firehose_delete_section_menu',
		reskey:	reskey_static,
		undo:	undo||0,
		id: 	id
	});
	firehose_set_options('section', $section_menu.metadata().default_id);
}
[% END %]

function save_menu(){
	if ( !check_logged_in() ) { return false; }

	// tell the server our current (ordered) list of sections
	ajax_update({
		op:	'firehose_save_section_menu',
		reskey:	reskey_static,
		fsids:	$section_menu.
					children('li:not(#fhsection-unsaved)').
						map(function(){ return this.id.slice(10); }).get().join(',')
	});
}


function unsaved(){
	var $unsaved = $any('fhsection-unsaved');
	if ( !$unsaved.length ) {
		($unsaved = $(unsaved.template).prependTo($section_menu)).metadata().id = 'unsaved';
	}
	return $unsaved;
}

var section_matching;
(function(){
var signatures={}, ids={}, ws=/\s+/, id_prefix=/^fhsection-/, default_color = {
	stories: 'green',
	recent: 'blue',
	popular: 'green',
	daddypants: 'indigo'
};

function init_metadata( el ){
	var $el=$(el), result=$el.metadata({ type:'elem', name:'script' });
	$el.find('script[type=data]').remove();
	return result;
}

function signature( section ){
	return section.viewname + ';'
		+ (section.color||default_color[section.viewname]) + ';'
		+ $.trim(section.filter).toLowerCase().split(ws).sort().join(' ');
}

section_matching = function( data ){
	var	have_id			= $section_menu.metadata().active_id,
		have			= signatures[have_id],
		want			= signature(data),
		want_id			= (have_id==='unsaved'||want!==have) ? ids[want] : have_id,
		$want			= want_id && firehose_section_menu_item(want_id),
		want_section	= want_id && $want.length && $want.metadata();


	[% IF user.is_admin %]
	if ( want_id!==have_id ) {
		function label( s ){
			var name='';
			if ( s.name ) {
				name = s.name + '[' + s.id + ']:';
			} else if ( s.id==='unsaved' ) {
				name = s.id + ':';
			}
			return name+'"'+signature(s)+'"';
		}
		var	key		= 'unsaved-debug',
			message = 'To '+label(want_section||data)+'; '+
					  'from '+label(firehose_section_menu_item(have_id).metadata());
		Slash.message({ key:key, content:$('<p id="'+key+'">').text(message) });
		setTimeout(function(){
			$any(key).fadeOut(2000, function(){ Slash.clear_message(key); });
		}, 8000);
	}
	[% END %]

	return want_section;
};

update_section = function( el, update, opts ){
	var section	= init_metadata(el),
		id		= section.id, // assert(id);
		oldsig	= signatures[id],
		newsig	= signature($.extend(section,
					// Make the color explicit.
					!section.color && { color:default_color[section.viewname] },
					// Roll-in the updated data, if any; but protect the id.
					update, { id:id }
				));

	// Update the signatures that let us match properties to existing sections.
	if ( id!=='unsaved' && newsig!==oldsig ) {
		ids[ signatures[id]=newsig ] = id;
		if ( oldsig ) {
			delete ids[ oldsig ];
			// Discard cached skin if the search has changed.
			section.skin && oldsig.split(';')[2]!==newsig.split(';')[2] && delete section.skin;

			// This must be a change to an existing menu item, so let's save the menu as a whole.
			save_menu();
		}
	}

	if ( opts ) {
		opts.highlight && highlight_menu_item(id);
		opts.make_default && ($section_menu.metadata().default_id=id);
	}
};

// Force-initialize the metadata and build the section_matching map.
var $sections=$any('links-sections').find('div.title,li');
$sections.add($section_menu).each(function(){ init_metadata(this); });
$('#links-sections-title').metadata().name = "Slashdot";
$sections.each(function(){ update_section(this); });
})();


function highlight_menu_item( section_id ){
	return firehose_section_menu_item(section_id).each(function(){
		$('#links-sections .active').not(this).removeClass('active');
		$( $('h4', this)[0] || this ).addClass('active');
		$section_menu.metadata().active_id = section_id;
		firehose_style_switch(section_id);
	});
}


$any('links-sections').
	mousedown(function( event ){	// "activate" a section (immediately) on mousedown in the section menu
		$(event.originalTarget||event.target).	// mouseDown was on this element...
			closest('li,div.title').not('.active,:has(.active)').
				each(function(){
					var section = $(this).metadata();
					if ( section.id !== 'unsaved' ) {
						[% IF !user.is_anon %]
						firehose_set_options('section', section.id);
						[% END %]
					} else {
						[% IF !user.is_anon %]
						firehose_set_options('setfhfilter', section.filter);
						firehose_set_options('view', section.viewname);
						section.color && firehose_set_options('color', section.color);
						[% END %]
					}
				});
		// allow other handlers to run (by not returning false)
	}).
	click(function( event ){		// edit only for a click in the edit button
		var handled;
		$(event.originalTarget||event.target).	// mouseDown was on this element...
			closest('a.links-sections-edit').	// ...in this edit icon (if any)
				each(function(){
					var id = $(this).closest('li,div.title').metadata().id;
					id==='unsaved' && (id=void(0));
					getModalPrefs('firehoseview', 'Save Custom Section', 0, { id: id });
					handled = true;
				});
		return !handled;
	});


// Drag items in the section-menu to reorder it permanently.
$section_menu.
	sortable({
		axis: 'y',
		containment: '#links-sections',
		opacity: 0.8,
		update: save_menu
	});


$(document).
	bind('firehose-setting-section', function( e, section_id ){
		// Request to change sections is on its way to the server; update the UI now (don't wait for response)
		var section = highlight_menu_item(section_id).metadata();
		$(document).
			trigger('firehose-setting-setfhfilter', section.filter).
			trigger('firehose-setting-view', section.viewname).
			trigger('firehose-setting-color', section.color);
	}).
	bind('set-options.firehose', function( e, data ){
		// Changing some option (possibly even the 'section' option)
		if ( !data.select_section ) {
			// OK, _not_ the 'section' option.  Activate a section that matches the new options, or else "unsaved"
			delete data.id;

			data = section_matching(data)||data;
			if ( !data.id ) {
				var $unsaved = unsaved();
				data = $.extend($unsaved.metadata(), data);
				$(document).
					one('update.firehose', function( e, updated ){
						$unsaved.find('a span').text(updated.local_time);
						if ( updated.skin ) {
							data.skin = updated.skin;
							firehose_style_switch('unsaved');
						}
					}).
					trigger('unsaved.firehose', data);
			}
		}
		highlight_menu_item(data.id);
	});

unsaved.template = (
	'<li id="fhsection-unsaved">'
		+ '<a><i class="data-title">unsaved</i> <span></span></a>'
		+ '<a href="[% PROCESS nojslink %]"'
			+ ' onclick="[% IF user.is_anon %]show_login_box(); [% END %]return false;"'
			+ ' class="links-sections-edit">'
				+ '[e]'
		+ '</a>'
	+ '</li>'
);

})();
</script>[% END %]
__seclev__
1000
__version__
$Id$
