__section__
default
__description__
Template for generating the skinindexd template.  Uses an alternate
form of tags (<++> instead of [%%]) so it can write the standard tag
form into skinindexd.  Input:

* skins = arrayref of hashref of skin data (containing month,
	monthname, date, count, skin, rootdir)
* skin = name of parent skin

__title__

__page__
misc
__lang__
en_US
__name__
firehose_sections
__template__
[% cur_section_id = 0 %]
[% skip_edit = 0 %]
[% UNLESS (user.currentPage == "firehose" || user.currentPage == "index2" || user.currentPage == "console" || user.currentPage == "index");
	skip_edit = 1;
END;

IF  form.op == "view" || form.taskgen;
	skip_edit = 1;
END;
%]

[% IF cur_section && cur_section.fsid; cur_section_id = cur_section.fsid; END %]
[% default_section_id = constants.mainpage_skid %]
[% IF !user.is_anon && user.firehose_default_section; default_section_id = user.firehose_default_section; END %]
<ul id="firehose-sections">
	<script type="data">{ active_id:[% cur_section_id %], default_id:[% default_section_id %] }</script>
	[% FOREACH fh_section= sections %]
		[% NEXT IF skip_section_id && fh_section.fsid == skip_section_id %]
		[% hide = 0 %]
		[% IF fh_section.user_display; fh_section.display = fh_section.user_display; END %]
		[% IF fh_section.user_section_name; fh_section.section_name = fh_section.user_section_name; END %]
		[% IF fh_section.user_section_color; fh_section.user_section_color = fh_section.user_section_color; END %]
		[% is_active = 0 %]
		[% IF fh_section.fsid == cur_section_id; is_active = 1; END %]
		[% is_default = 0 %]
		[% IF cur_section_id == default_section_id; is_default = 1; END %]
		[% IF (fh_section.display == "no" && is_active == 0); hide=1; END %]
		[% link_loc = gskin.rootdir _ "/index2.pl?section=" _ fh_section.fsid %]
		[% IF fh_section.skid %]
			[% the_skin = Slash.db.getSkin(fh_section.skid) %]
			[% IF the_skin && the_skin.rootdir;
				link_loc = the_skin.rootdir;
			   END %]
		[% END %]
		<li class="[% IF is_active %]active[% ELSIF hide %]hide[% END %][% IF is_default %] default[% END %]" id="fhsection-[% fh_section.fsid %]">
			<a id="fhsectiontitle-[% fh_section.fsid %]" href="[% link_loc %]"[% IF !user.is_anon %] onclick="return false;"[% END %]>[% fh_section.section_name %]</a>
			[% IF !skip_edit %] <a href="[% PROCESS nojslink %]" class="links-sections-edit">[e]</a>[% END %]
		<script type="data">[% fh.js_anon_dump(fh_section.data); %]</script>
		</li>
	[% END %]
</ul>
[% IF !user.is_anon && (user.currentPage == "index2" || user.currentPage == "firehose" || user.currentPage == "console") && form.op != "view" && !form.taskgen %]<script type="text/javascript">
$(function(){

function unsaved(){
	var $unsaved = $any('fhsection-unsaved');
	if ( !$unsaved.length ) {
		($unsaved = $(unsaved.template).prependTo('#firehose-sections')).metadata().id = 'unsaved';
	}
	return $unsaved;
}

var section_matching;
(function(){
var signatures={}, ids={}, ws=/\s+/, default_color = {
	stories: 'green',
	recent: 'blue',
	popular: 'green',
	daddypants: 'indigo'
};

function signature( section ){
	return section.viewname + ';'
		+ (section.color||default_color[section.viewname]) + ';'
		+ $.trim(section.filter).toLowerCase().split(ws).sort().join(' ');
}

section_matching = function( data ){
	var id		= $any('firehose-sections').metadata().active_id,
		goal	= signature(data),
		$menu_item;
	(id==='unsaved' || signatures[id]!==goal) && (id = ids[goal]);
	return id && ($menu_item=firehose_section_menu_item(id)) && $menu_item.metadata();
}

$(document).bind('section-updated.firehose', function( event, update ){
	var section = (update.menu_item||firehose_section_menu_item(update.id)).metadata();
	update.changes && $.extend(section, update.changes);
	if ( update.id && update.id !== 'unsaved' ) {
		delete ids[ signatures[update.id] ];
		ids[ signatures[update.id]=signature(section) ] = update.id;
	}
});

// Force-initialize the metadata and build the section_matching map.
$('#links-sections script[type=data]').
	closest('li,div.title').
		each(function(){
			var section = $(this).metadata({type:'elem', name:'script'});
			ids[ signatures[section.id]=signature(section) ] = section.id;
		}).
	end().
	remove();

$any('firehose-sections').metadata().home_id = $any('links-sections-title').metadata().id;
})();

function highlight_menu_item( section_id ){
	return firehose_section_menu_item(section_id).each(function(){
		$('#links-sections .active').not(this).removeClass('active');
		$(this).addClass('active');
		$any('firehose-sections').metadata().active_id = section_id;
	});
}

$any('links-sections').
	mousedown(function( event ){	// "activate" a section (immediately) on mousedown in the section menu
		$(event.originalTarget||event.target).	// mouseDown was on this element...
			closest('li,div.title').not('.active,:has(.active)').
				each(function(){
					var section = $(this).metadata();
					if ( section.id !== 'unsaved' ) {
						firehose_set_options('section', section.id);
					} else {
						firehose_set_options('setfhfilter', section.filter);
						firehose_set_options('view', section.viewname);
						section.color && firehose_set_options('color', section.color);
					}
				});
		// allow other handlers to run (by not returning false)
	}).
	click(function( event ){		// edit only for a click in the edit button
		[% IF user.is_anon %]
		show_login_box();
		[% ELSE %]

		$(event.originalTarget||event.target).	// mouseDown was on this element...
			closest('a.links-sections-edit').	// ...in this edit icon (if any)
				each(function(){
					var id = $(this).closest('li,div.title').metadata().id;
					id==='unsaved' && (id=void(0));
					getModalPrefs('firehoseview', 'Save Custom Section', 0, { id: id });
				});

		[% END %]
		return false;
	});

$(document).
	bind('firehose-setting-section', function( e, section_id ){
		// Request to change sections is on its way to the server; update the UI now (don't wait for response)
		var section = highlight_menu_item(section_id).metadata();
		$(document).
			trigger('firehose-setting-setfhfilter', section.filter).
			trigger('firehose-setting-view', section.viewname).
			trigger('firehose-setting-color', section.color);
		firehose_style_switch(section_id);
	}).
	bind('set-options.firehose', function( e, data ){
		// Changing some option (possibly even the 'section' option)
		if ( !data.select_section ) {
			// OK, _not_ the 'section' option.  Activate a section that matches the new options, or else "unsaved"
			delete data.id;

			data = section_matching(data)||data;
			if ( !data.id ) {
				var $unsaved = unsaved();
				data = $.extend($unsaved.metadata(), data);
				$(document).
					one('update.firehose', function( e, updated ){
						$unsaved.find('a span').text(updated.local_time);
					});
			}
		}
		highlight_menu_item(data.id);
	});

unsaved.template = '<li id="fhsection-unsaved"><a><i>unsaved</i> <span></span></a><a class="links-sections-edit">[e]</a></li>';

});
</script>[% END %]
__seclev__
1000
__version__
$Id$
