#!perl -w

use strict;
use File::Basename;
use Getopt::Std;
use Slash;
use Slash::Utility;
use Data::Dumper;

# After updating the schema to convert tid columns from SMALLINT to INT,
# run this script to convert the tid data to match the relevant
# tagnameid's.

# Script usage: convertTidToTagnameid -u <virtuser>

use vars qw( $constants $slashdb );
my $PROGNAME = basename($0);

my (%opts);

die('Options used incorrectly') unless getopts('hu:', \%opts);
die "Username required, i.e.: convertTidToTagnameid -u <virtuser>" unless $opts{u};

createEnvironment($opts{u});
$constants = getCurrentStatic();
$slashdb = getCurrentDB();

# Get the first half of the equation, the map between topic keyword
# and topic id.
my $tid_to_keyword = $slashdb->sqlSelectAllKeyValue('tid, keyword', 'topics');
my $keyword_to_tid = {( reverse %$tid_to_keyword )};
if (scalar(keys %$keyword_to_tid) != scalar(keys %$tid_to_keyword)) {
	die "topics.keyword apparently not unique, aborting";
}

# Convert topic name to tagname, which is basically a map except in the
# case of two topics.  See extractChosenFromTags()
my $tagname_to_tid = {( %$keyword_to_tid )};
$tagname_to_tid->{meta}     = $tagname_to_tid->{slashdot};
$tagname_to_tid->{slashdot} = $tagname_to_tid->{mainpage};
delete $tagname_to_tid->{mainpage};
my $tid_to_tagname = {( reverse %$tagname_to_tid )};

# Get the second half, which is the map between tagname and tagnameid.
my $tagsdb = getObject('Slash::Tags');
my $tagname_to_tagnameid = { };
for my $tagname (sort keys %$tagname_to_tid) {
	my $tagnameid = $tagsdb->getTagnameidCreate($tagname);
	$tagname_to_tagnameid->{$tagname} = $tagnameid;
}
if (scalar(keys %$tagname_to_tagnameid) != scalar(keys %$tagname_to_tid)) {
	die "tagname(s) apparently missing, aborting";
}
my $tid_to_tagnameid = {( map {( $_, $tagname_to_tagnameid->{ $tid_to_tagname->{$_} } )} keys %$tid_to_tagname )};

my $success = 1;

# Add the conversion table
$success &&= $slashdb->sqlDo('CREATE TABLE topics_changetid ( tid_old INT UNSIGNED NOT NULL, tagnameid_new INT UNSIGNED NOT NULL, PRIMARY KEY (tid_old) ) ENGINE=InnoDB');
if (!$success) {
	die "aborting since creation of topics_changetid failed";
}
ADDTCTID: for my $tid (sort { $a <=> $b } keys %$tid_to_tagname) {
	$success &&= $slashdb->sqlInsert('topics_changetid', {
		tid_old => $tid,
		tagnameid_new => $tid_to_tagnameid->{$tid} + 1000000000,
	});
	last ADDTCTID unless $success;
}
if (!$success) {
	die "aborting since insertion into topics_changetid failed";
}

$slashdb->sqlDo('START TRANSACTION');

my $uid_max = $slashdb->sqlSelect('MAX(uid)', 'users');
if (!$uid_max) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since MAX(uid) failed";
}

# Add foreign keys to the database so we can cascade updates
my @fks = qw(
	discussions.topic	pollquestions.topic	skins.nexus
	stories.tid		story_topics_chosen.tid	story_topics_rendered.tid
	submissions.tid		topic_nexus.tid		topic_nexus_dirty.tid
	topic_nexus_extras.tid	topic_param.tid		topic_parents.tid
	topic_parents.parent_tid			firehose_topics_rendered.tid
);
my $fk_num = 0;
ADDFK: for my $fk (@fks) {
	my($table, $column) = split /\./, $fk;
	++$fk_num;
	$success &&= $slashdb->sqlDo("ALTER TABLE $table ADD CONSTRAINT ibfk_converttid_$fk_num FOREIGN KEY ($column) REFERENCES topics (tid) ON UPDATE CASCADE");
	last ADDFK unless $success;
}
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since FK creation failed";
}

# Update topics.tid, cascading to the other tables.
$success &&= $slashdb->sqlUpdate('topics, topics_changetid',
	{ '-topics.tid' => 'topics_changetid.tagnameid_new' },
	"topics.tid = topics_changetid.tid_old");
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since first update failed";
}
$success &&= $slashdb->sqlUpdate('topics', { -tid => 'tid - 1000000000' });
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since second update failed";
}

# Remove the foreign keys, they served their purpose.
$fk_num = 0;
REMFK: for my $fk (@fks) {
	my($table, $column) = split /\./, $fk;
	++$fk_num;
	$success &&= $slashdb->sqlDo("ALTER TABLE $table DROP FOREIGN KEY ibfk_converttid_$fk_num");
	last REMFK unless $success;
}
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since removing FKs failed";
}

my @uicols = qw( story_never_nexus story_always_nexus story_brief_best_nexus story_full_brief_nexus story_brief_always_nexus story_full_best_nexus );
my $select_clause = join(', ', @uicols);
my $where_clause = join(' OR ', map { "$_ != ''" } @uicols);
my @uirows = ( );
my $cur_uid = 0;
UI: while ($cur_uid < $uid_max) {
	my $new_uid = $cur_uid + 1000;
	my $ar = $slashdb->sqlSelectAllHashrefArray(
		"uid, $select_clause",
		'users_index',
		"uid > $cur_uid AND uid <= $new_uid
		 AND ($where_clause)",
		'ORDER BY uid');
	if (!$ar) {
		$success = 0;
		last UI;
	}
	push @uirows, @$ar;
	$cur_uid = $new_uid;
}
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since select from users_index failed";
}
UI: for my $userdata (@uirows) {
	my $update_hr = { };
	for my $uicol (grep { $_ ne 'uid' } keys %$userdata) {
		my @tids = split /,/, $userdata->{$uicol};
		my @tagnameids = map { $tid_to_tagnameid->{$_} } @tids;
		$update_hr->{$uicol} = join ',', @tagnameids;
	}
	$success &&= $slashdb->sqlUpdate('users_index', $update_hr, "uid=$userdata->{uid}");
	if (!$success) {
		warn "update failed on $userdata->{uid}: " . Dumper($update_hr);
		last UI;
	}
}
if (!$success) {
	$slashdb->sqlDo('ROLLBACK');
	die "aborting since updating users_index failed";
}

$slashdb->sqlDo('COMMIT');

# probably want to DROP TABLE topics_changetid here
# but I'll save that for a later upgrades file, "just in case"

# fix mainpage_nexus_tid, mainpage_displayable_nexuses

