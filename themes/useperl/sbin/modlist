#!/usr/bin/perl -w

# get day full of CPAN uploads from search.cpan.org
# pudge@pobox.com 2001.11.27

use strict;
use CPAN;
use Data::Dumper;
use DB_File;
use File::Spec::Functions;
use LWP::UserAgent;
use HTTP::Request;
use XML::RSS;

use Slash;
use Slash::Display;
use Slash::Utility;

my $virtual_user = $ARGV[0];
createEnvironment($ARGV[0]);
my $constants = getCurrentStatic();
my $slashdb = getCurrentDB();

# customize
my $url  = 'http://search.cpan.org/rss/recent.rss?since=&limit=100&desc=1'; #'http://search.cpan.org/rss/search.rss'; #'http://search.cpan.org/recent_long.rdf';
my $file = catfile($constants->{datadir}, "misc", "cpanrecent-db");

my %story = (
	# customize uid, tid, skid, title
	uid		=> 1,		# pudge
	tid		=> 41,		# module listings
	skid		=> 5,		# ditto
	title		=> timeCalc($slashdb->getTime(), "New CPAN Distributions for %B %e, %Y"),
	'time'		=> $slashdb->getTime(),
#	displaystatus	=> 1,
	commentstatus	=> 0,
);

$story{topics_chosen} = { $story{tid} => 20 };

$story{relatedtext} = slashDisplay('otherLinks', {
		uid	=> $story{uid},
		aid	=> 'pudge',	# customize
		tid	=> $story{tid},
		topic	=> $slashdb->getTopic($story{tid}),
	}, {
		Skin	=> 'admin',
		Page	=> 'admin',
		Return	=> 1,
		Nocomm	=> 1
	}
);


my $data = geturl($url);
if (!$data) {
	print STDERR "failed to get $url: $@";
	exit -1;
}

my $rss = new XML::RSS;
eval { $rss->parse($data) };
if ($@) {
	print STDERR "$url did not parse properly: $@";
	exit -1;
}

my %dist;
foreach my $item (@{$rss->{items}}) {
	$dist{$item->{'title'}} = { 'link' => $item->{'link'} };

#	(my $w = $item->{'title'}) =~ s|^(.+?)(?:\.pm)?[-_][\w@.]+(?:-\w+)?$|$1|;
#	(my $m = $w) =~ s/-/::/g;
#	my $mod = CPAN::Shell->expand('Module', $m);
#	my $d = $mod && $mod->description ?
#		$mod->description : '';
#	$dist{$item->{'title'}}{'desc'} = $d;
	$dist{$item->{'title'}}{'desc'} = $item->{'description'};
}

tie my %dbm, "DB_File", $file, O_RDWR | O_CREAT, 0644 or die "Can't open file: $!";
for my $dist (sort keys %dist) {
	if (exists $dbm{$dist}) {
		delete $dist{dist};	
	} else {
		$dbm{$dist} = 1;
		$story{introtext} .= qq[  <li><a href="$dist{$dist}{'link'}">$dist</a>];
		if ($dist{$dist}{'desc'}) {
			$story{introtext} .= " -- $dist{$dist}{'desc'}";
		}
		$story{introtext} .= "</li>\n";
	}
}

exit if !$story{introtext};
$story{introtext} = "<ul>\n$story{introtext}</ul>\n";

#print Dumper \%story;
#exit;

my $sid = $slashdb->createStory(\%story);
if ($sid) {
#	my $id = $slashdb->createDiscussion( {
#		title	=> $story{title},
#		primaryskid => $story{skid},
#		topic	=> $story{tid},
#		url	=> "$constants->{rootdir}/article.pl?sid=$sid",
#		sid	=> $sid,
#		ts	=> $story{'time'}
#	});
#	if ($id) {
#		$slashdb->setStory($sid, { discussion => $id });
#	} else {
#		print STDERR "Could not create discussion for story '$sid'";
#		exit -1;
#	}
} else {
	print STDERR "Could not create story";
	exit -1;
}

################################################################################
sub geturl {
	my $ua = new LWP::UserAgent;
	my $request = new HTTP::Request('GET', $_[0]);
# 	$ua->proxy(http => $constants->{http_proxy}) if $constants->{http_proxy};
# 	$ua->timeout(30);
	my $result = $ua->request($request);

	if ($result->is_success) {
		(my $content = $result->content) =~ s/\015?\012/\n/;
		return $content;
	} else {
		return 0;
	}
}

__END__
